name: Build and Scan with JFrog

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Setup JFrog CLI & Environment Variables for Build Info
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ secrets.JF_RT_URL }}
          JF_USER: ${{ secrets.ARTIFACTORY_USERNAME }}
          JF_PASSWORD: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GH_TOKEN }}
          JFROG_CLI_BUILD_NAME: spring-petclinic
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

      # 4. Clean local Maven cache
      - name: Clear local Maven cache
        run: rm -rf ~/.m2/repository

      # 5. Ensure mvnw is executable
      - name: Ensure mvnw is executable
        run: chmod +x mvnw

      # 6. Verify JFrog connection
      - name: Ping JFrog Connection
        run: jf rt ping

      # 7. Configure Maven Repositories
      - name: Configure Maven Repositories with JFrog CLI
        run: |
          jf mvnc --global \
            --repo-resolve-releases petclinic-maven-dev-virtual \
            --repo-resolve-snapshots petclinic-maven-dev-virtual \
            --repo-deploy-releases petclinic-maven-dev-local \
            --repo-deploy-snapshots petclinic-maven-dev-local

      # 8. Build and Deploy with Maven using JFrog CLI
      - name: Maven Build & Deploy With JFrog CLI
        run: |
          jf mvn clean deploy -DskipTests=true -Denforcer.skip=true \
            --build-name="spring-petclinic" \
            --build-number="${{ github.run_number }}"

      # 9. Build Docker Image
      - name: Build Docker Image
        run: |
          jf docker build -t trialt0zppb.jfrog.io/petclinic-docker-dev-local/spring-petclinic:${{ github.run_number }} .

      # 10. Push Docker Image to Artifactory
      - name: Push Docker Image to Artifactory
        run: jf docker push trialt0zppb.jfrog.io/petclinic-docker-dev-local/spring-petclinic:${{ github.run_number }}

      # 11. Publish Build Information
      - name: Collect Build Info
        run: |
          jf rt build-collect-env "spring-petclinic" "${{ github.run_number }}"

      - name: Add Git Information
        run: |
          jf rt build-add-git "spring-petclinic" "${{ github.run_number }}"

      - name: Publish Build Info
        run: |
          jf rt build-publish "spring-petclinic" "${{ github.run_number }}"

      # 12. Scan Published Build with Xray
      - name: Scan Published Build with Xray (fail on policy)
        if: success()
        run: |
          echo "Scanning build spring-petclinic/${{ github.run_number }} with Xray..."
          jf bs "spring-petclinic" "${{ github.run_number }}" --fail=true
