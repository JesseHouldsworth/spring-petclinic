name: Build and Scan with JFrog

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Setup JFrog CLI & Environment Variables for Build Info
      #    Crucially sets JFROG_CLI_BUILD_NAME and JFROG_CLI_BUILD_NUMBER
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ secrets.JF_RT_URL }}
          JF_USER: ${{ secrets.ARTIFACTORY_USERNAME }}
          JF_PASSWORD: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GH_TOKEN }} # For Git info collection
          # Define Build Name and Number for automatic association
          JFROG_CLI_BUILD_NAME: spring-petclinic # Consistent build name
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_id }} # Unique build number

      # 4. Clean local Maven cache (optional but recommended)
      - name: Clear local Maven cache
        run: rm -rf ~/.m2/repository

      # 5. Ensure mvnw is executable
      - name: Ensure mvnw is executable
        run: chmod +x mvnw

      # 6. Verify JFrog connection
      - name: Ping JFrog Connection
        run: jf rt ping

      # 7. Configure Maven Repositories (Resolution & Deployment)
      #    Ensure 'petclinic-maven-dev-local' exists and permissions are set.
      - name: Configure Maven Repositories with JFrog CLI
        run: |
          jf mvnc --global \
            --repo-resolve-releases petclinic-maven-dev-virtual \
            --repo-resolve-snapshots petclinic-maven-dev-virtual \
            --repo-deploy-releases petclinic-maven-dev-local \
            --repo-deploy-snapshots petclinic-maven-dev-local

      # 8. Build and Deploy with Maven using JFrog CLI
      #    'deploy' goal pushes artifacts to Artifactory.
      #    'jf mvn' automatically associates deployed artifacts with build info.
      - name: Maven Build & Deploy With JFrog CLI
        run: |
          jf mvn clean deploy -DskipTests=true -Denforcer.skip=true

      # 9. Build Docker Image
      - name: Build Docker Image
        run: |
          jf docker build -t trialt0zppb.jfrog.io/petclinic-docker-dev-local/spring-petclinic:${{ github.run_id }} .

      # 10. Push Docker Image using JFrog CLI
      #     Explicitly link Docker image layers to the build info.
      - name: Push Docker Image to Artifactory
        run: jf docker push trialt0zppb.jfrog.io/petclinic-docker-dev-local/spring-petclinic:${{ github.run_id }}

      # 11. Publish Build Information
      #     Collects environment, Git info, and publishes the aggregated build record.
      - name: Publish Build Info
        run: |
          echo "Collecting environment variables..."
          # Use standard shell syntax ($VAR or ${VAR}) to access env vars here
          jf rt build-collect-env ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}}
          echo "Collecting Git information..."
          jf rt build-add-git ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}}
          echo "Publishing build info..."
          jf rt build-publish ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}}

      # 12. Scan Published Build with Xray
      #     This command associates the scan results with the build in the Artifactory UI.
      #     'continue-on-error' prevents CI failure if jf bs exits non-zero.
      - name: Scan Published Build with Xray
        if: success()
        continue-on-error: true
        run: |
          echo "Scanning build $JFROG_CLI_BUILD_NAME/$JFROG_CLI_BUILD_NUMBER with Xray..."
          jf bs ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}}
          echo "Xray scan initiated via jf bs. Check the build info's Xray Data tab in Artifactory UI for results."