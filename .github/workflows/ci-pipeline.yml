name: Build with JFrog CLI (Forcing New Extractor)

on:
  push:
    branches:
      - main
      - develop

  pull_request:
    branches: [ "main" ]  # Trigger workflow on pull requests targeting main

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for execution

    steps:
      #################################################
      # 1) Checkout the repository to the runner
      #################################################
      - name: Checkout
        uses: actions/checkout@v4  # Pulls the latest code from the repository

      #################################################
      # 2) Set up Java environment
      #################################################
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Use Eclipse Temurin JDK (OpenJDK)
          java-version: '17'       # Ensure Java 17 is installed

      #################################################
      # 3) Install and Configure JFrog CLI
      # âœ¨ Explicitly set build name/number to avoid duplicate builds
      #################################################
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4  # Official JFrog CLI GitHub Action
        id: setup-cli
        env:
          JF_URL: ${{ secrets.JF_RT_URL }}  # Artifactory base URL
          JF_USER: ${{ secrets.ARTIFACTORY_USERNAME }}  # Artifactory username
          JF_PASSWORD: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}  # Artifactory identity token
          JF_GIT_TOKEN: ${{ secrets.GH_TOKEN }}  # GitHub token for git info
          JFROG_CLI_RELEASES_REPO: 'https://trialt0zppb.jfrog.io/artifactory/petclinic-maven-dev-virtual/'
          JFROG_CLI_EXTRACTORS_REMOTE: 'https://trialt0zppb.jfrog.io/artifactory/petclinic-maven-dev-virtual/'
          JFROG_CLI_BUILD_NAME: spring-petclinic  # ðŸ‘ˆ Ensures CLI uses consistent build name
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_id }}  # ðŸ‘ˆ Matches the CLI-published build number

      #################################################
      # 4) Clean the local Maven cache (optional but recommended)
      #################################################
      - name: Clear local Maven cache
        run: rm -rf ~/.m2/repository  # Ensures a clean build by removing old dependencies

      #################################################
      # 5) Ensure mvnw is executable
      #################################################
      - name: Ensure mvnw is executable
        run: chmod +x mvnw  # Make the Maven wrapper script executable

      #################################################
      # 6) Verify JFrog connection
      #################################################
      - name: ping jfrog
        run: jf rt ping  # Verifies connectivity to Artifactory

      #################################################
      # 7) Configure Maven to use JFrog as a repository
      #################################################
      - name: configure maven
        run: jf mvnc --global --repo-resolve-releases petclinic-maven-dev-virtual/ --repo-resolve-snapshots petclinic-maven-dev-virtual/
        # Configures Maven to resolve dependencies from Artifactory

      #################################################
      # 8) Build project using JFrog CLI with Maven
      #################################################
      - name: Maven Build With JFrog CLI
        run: |
          jf mvn clean install \
            -DskipTests=true -Denforcer.skip=true

      #################################################
      # 9) Scan with XRay
      #################################################
      - name: Scan Artifact
        run: |
          latest_jar=$(find target -name "*.jar" | sort | tail -n 1)
          echo "Scanning: $latest_jar"
          jf scan "$latest_jar"

      #################################################
      # 10) Build Docker image with local Docker
      #################################################
      - name: Build Docker Image
        run: |
          docker build -t trialt0zppb.jfrog.io/petclinic-docker-dev-local/spring-petclinic:${{ github.run_id }} .

      #################################################
      # 11) Push Docker image using JFrog CLI
      #################################################
      - name: Push Docker Image to Artifactory
        run: |
          jf rt docker-push \
            trialt0zppb.jfrog.io/petclinic-docker-dev-local/spring-petclinic:${{ github.run_id }} \
            petclinic-docker-dev-local

      #################################################
      # 12) Publish Build Information to JFrog
      #################################################
      - name: Publish Build Info
        run: jf rt build-publish "spring-petclinic" "${{ github.run_id }}"